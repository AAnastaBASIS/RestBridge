REM /**
REM  * RestOutputHandler.bbj
REM  * @author jcorea@basis.com
REM  *
REM  * handles output in the response for the RestBridge by "ACCEPT" header
REM  * this file path has to be set as servlet parameter "REST_OUTPUTHANDLER"
REM  */
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.ResultSetExporter

TEXT_HTML:
declare BBjspWebResponse response!
declare BBjspWebRequest request!
declare ResultSet rs!
declare String resp_str!
enter rs!, resp_str!, restbridge_opt_jsonmeta, method$, request!, response!, pk!, answer!, debug
if rs!.size() then
    custom_css! = rs!.get(0).getAttribute("CUSTOM_CSS")
endif
response!.setContentType("text/html; charset="+info(1,2))

if custom_css! <> null() then
    resp_str!="<html><head><style>table, th, td {padding:5px;border: 1px solid black;} "+str(custom_css!)+"</style></head><body>"
else
    resp_str!="<html><head><style>table, th, td {padding:5px;border: 1px solid black;}</style></head><body>"
endif

single = num(answer!.get("single",err=*next),err=*next)
if single>0 AND rs!.size()=1 then
    rem TODO move this pivoted display into the writer
    rec! = rs!.get(0)
    it! = rec!.getFieldNames().iterator()
    resp_str! = resp_str!+"<table>"
    if request!.getPathInfo().endsWith("/_meta") then
        attrSet! = new java.util.HashSet()
        while it!.hasNext()
            f$ = it!.next()
            attrSet!.addAll(rs!.getColumnMetaData(f$).keySet())
        wend
        it! = attrSet!.iterator()
        resp_str! = resp_str!+"<tr><td></td>"
        while it!.hasNext()
            metaName$ = it!.next()
            resp_str! = resp_str!+"<td><b>"+metaName$+"</b></td>"
        wend
        resp_str! = resp_str!+"</tr>"
        it! = rec!.getFieldNames().iterator()
        while it!.hasNext()
            f$ = it!.next()
            metaMap! = rs!.getColumnMetaData(f$)
            resp_str! = resp_str!+"<tr><td><b>"+f$+"</b></td>"
            it2! = attrSet!.iterator()
            while it2!.hasNext()
                metaName$ = it2!.next()
                if metaMap!.containsKey(metaName$) then
                    resp_str! = resp_str!+"<td>"+str(metaMap!.get(metaName$))+"</td>"
                else
                    resp_str! = resp_str!+"<td></td>"
                endif
            wend
            resp_str! = resp_str!+"</tr>"
        wend
    else
        while it!.hasNext()
            f$=it!.next()
            resp_str! = resp_str!+"<tr><td><b>"+f$+"</b></td><td>"+rec!.getFieldAsString(f$)+"</td></tr>"
        wend
    endif
    resp_str! = resp_str!+"</table>"
else
    if (pk! <> null() ) then
        pk$=str(pk!)
        links! = new java.util.HashMap()
        link$ = request!.getContextPath()+request!.getServletPath()+request!.getPathInfo().replaceAll("(/[^/]+)/.*|$","$1")

        while pk$>""
            if pos("/"=pk$)>0 then
                f$=pk$(1,pos("/"=pk$)-1)
                pk$=pk$(pos("/"=pk$)+1)
            else
                f$=pk$
                pk$=""
            fi
            link$=link$+"/{"+f$+"}"
            links!.put(f$,link$)
        wend
    else
        links! = null()
    fi
    wr! = new java.io.StringWriter()

    ResultSetExporter.writeHTML(rs!,wr!,links!)
    wr!.flush()
    wr!.close()
    resp_str! = resp_str!+wr!.toString()
fi
resp_str! = resp_str!+"</body></html>"
EXIT

APPLICATION_JSON:
declare BBjspWebResponse response!
declare BBjspWebRequest request!
declare ResultSet rs!
declare String resp_str!
enter rs!, resp_str!, restbridge_opt_jsonmeta, method$, request!, response!, pk!, answer!, debug
wr! = new java.io.StringWriter()
response!.setContentType("application/json")
ResultSetExporter.writeJSON(rs!,wr!,restbridge_opt_jsonmeta)
wr!.flush()
wr!.close()
resp_str!=cast(String, wr!.toString())
EXIT

TEXT_XML:
declare BBjspWebResponse response!
declare BBjspWebRequest request!
declare ResultSet rs!
declare String resp_str!
enter rs!, resp_str!, restbridge_opt_jsonmeta, method$, request!, response!, pk!, answer!, debug
wr! = new java.io.StringWriter()
response!.setContentType("text/xml")
ResultSetExporter.writeXML(rs!,"root","entity",wr!)
wr!.flush()
wr!.close()
resp_str!=cast(String, wr!.toString())
EXIT

APPLICATION_XML:
declare BBjspWebResponse response!
declare BBjspWebRequest request!
declare ResultSet rs!
declare String resp_str!
enter rs!, resp_str!, restbridge_opt_jsonmeta, method$, request!, response!, pk!, answer!, debug
wr! = new java.io.StringWriter()
response!.setContentType("application/xml")
ResultSetExporter.writeXML(rs!,"root","entity",wr!)
wr!.flush()
wr!.close()
resp_str!=cast(String, wr!.toString())
EXIT

TEXT_CSV:
TEXT_PLAIN:
declare BBjspWebResponse response!
declare BBjspWebRequest request!
declare ResultSet rs!
declare String resp_str!
enter rs!, resp_str!, restbridge_opt_jsonmeta, method$, request!, response!, pk!, answer!, debug
response!.setContentType("text/csv")
wr! = new java.io.StringWriter()
ResultSetExporter.writeTXT(rs!,wr!)

wr!.flush()
wr!.close()
resp_str!=wr!.toString()
EXIT

APPLICATION_XLS:
declare BBjspWebResponse response!
declare BBjspWebRequest request!
declare ResultSet rs!
declare String resp_str!
enter rs!, resp_str!, restbridge_opt_jsonmeta, method$, request!, response!, pk!, answer!, debug
response!.setContentType("application/xls")
if request!.getPathInfo().matches("/[^/]+/_output_/([^/]+)$") then
    filename$ = request!.getPathInfo().replaceAll("/[^/]+/_output_/([^/]+)$","$1")
else
    filename$ = request!.getPathInfo().replaceAll("/([^/]+).*","$1")+".xlsx"
endif
 
response!.setHeader("content-disposition","attachment; filename="""+filename$+"""")
d$=System.getProperty("basis.cacheDirectory")+"/_output_/"
mkdir d$,err=*next

wr! = new java.io.StringWriter()
f! = java.io.File.createTempFile("output_", "xls", new java.io.File(d$))
ResultSetExporter.writeXLSX(rs!, f!, 1)

if debug then
    System.out.println("REST: WRITING Excel to "+d$)
    System.out.println(f!.getAbsolutePath())
    System.out.println(str(rs!.size())+" Records written")
fi

java.nio.file.Files.copy(f!.toPath(), response!.getOutputStream())
f!.delete()
EXIT

DEBUG:
declare BBjspWebResponse response!
declare BBjspWebRequest request!
declare ResultSet rs!
declare String resp_str!
enter rs!, resp_str!, restbridge_opt_jsonmeta, method$, request!, response!, pk!, answer!, debug
s! = response!.getOutputStream()
s!.write(str(req!))
s!.write($0a$)

s!.write(str(answer!))
s!.write($0a$)
s!.write("Debug: ")
s!.write($0a$)
s!.write("getAttributeNames:"+str(request!.getAttributeNames()))
s!.write($0a$)
s!.write("getHeaderNames:"+str(request!.getHeaderNames()))
s!.write($0a$)
s!.write("getParameterNames:"+str(request!.getParameterNames()))
s!.write($0a$)
s!.write("getMethod:"+str(request!.getMethod()))
s!.write($0a$)
s!.write("getRequestURL:"+str(request!.getRequestURL()))
s!.write($0a$)
s!.write("getRequestURI:"+str(request!.getRequestURI()))
s!.write($0a$)
s!.write("Accept:"+str(request!.getHeader("Accept")))
s!.write($0a$)
EXIT